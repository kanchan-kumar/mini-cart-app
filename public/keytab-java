// File: src/main/java/com/example/keytab/service/KeytabGeneratorService.java
package com.example.keytab.service;

import com.example.keytab.config.KeytabProperties;
import com.example.keytab.model.KeytabRequest;
import com.example.keytab.validation.KeytabRequestValidator;
import org.apache.kerby.kerberos.kerb.KrbException;
import org.apache.kerby.kerberos.kerb.keytab.Keytab;
import org.apache.kerby.kerberos.kerb.type.base.EncryptionType;
import org.apache.kerby.kerberos.kerb.type.base.PrincipalName;
import org.apache.kerby.kerberos.kerb.type.key.EncryptionKey;
import org.springframework.stereotype.Service;

import java.io.*;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

@Service
public class KeytabGeneratorService {

    private final KeytabProperties properties;

    public KeytabGeneratorService(KeytabProperties properties) {
        this.properties = properties;
    }

    public byte[] generateKeytabToBytes(KeytabRequest request) throws KrbException, IOException {
        KeytabRequestValidator.validate(request);

        Keytab keytab = Keytab.create();
        PrincipalName principal = new PrincipalName(request.getPrincipal());

        List<String> encryptionNames = request.getEncryptionTypes() != null && !request.getEncryptionTypes().isEmpty()
                ? request.getEncryptionTypes()
                : properties.getDefaultEncryptionTypes();

        List<EncryptionType> encTypes = new ArrayList<>();
        for (String enc : encryptionNames) {
            encTypes.add(EncryptionType.fromName(enc));
        }

        for (EncryptionType encType : encTypes) {
            EncryptionKey key = EncryptionKey.deriveFromPassword(
                    request.getPassword(), principal.getName(), encType
            );
            keytab.addEntry(principal, 1, key);
        }

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        keytab.store(baos);

        String outputPath = request.getOutputPath() != null ? request.getOutputPath() : properties.getDefaultOutputPath();

        if (outputPath != null) {
            File file = new File(outputPath);
            file.getParentFile().mkdirs();
            try (FileOutputStream fos = new FileOutputStream(file)) {
                fos.write(baos.toByteArray());
            }
        }

        return baos.toByteArray();
    }

    public String generateBase64Keytab(KeytabRequest request) throws KrbException, IOException {
        return Base64.getEncoder().encodeToString(generateKeytabToBytes(request));
    }
}






// File: src/main/java/com/example/keytab/config/KeytabProperties.java
package com.example.keytab.config;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
@ConfigurationProperties(prefix = "keytab")
public class KeytabProperties {
    private List<String> defaultEncryptionTypes;
    private String defaultOutputPath;

    public List<String> getDefaultEncryptionTypes() {
        return defaultEncryptionTypes;
    }

    public void setDefaultEncryptionTypes(List<String> defaultEncryptionTypes) {
        this.defaultEncryptionTypes = defaultEncryptionTypes;
    }

    public String getDefaultOutputPath() {
        return defaultOutputPath;
    }

    public void setDefaultOutputPath(String defaultOutputPath) {
        this.defaultOutputPath = defaultOutputPath;
    }
}





# File: src/main/resources/application.yml
keytab:
  default-encryption-types:
    - aes256-cts-hmac-sha1-96
    - aes128-cts-hmac-sha1-96
    - des3-cbc-sha1
    - rc4-hmac
  default-output-path: /tmp/generated.keytab



// File: src/test/java/com/example/keytab/controller/KeytabGeneratorControllerTest.java
package com.example.keytab.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.example.keytab.model.KeytabRequest;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
public class KeytabGeneratorControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper mapper;

    @Test
    public void testBase64KeytabGeneration() throws Exception {
        KeytabRequest request = new KeytabRequest();
        request.setPrincipal("user@EXAMPLE.COM");
        request.setPassword("pass");
        request.setOutputType("base64");

        mockMvc.perform(post("/api/keytab/generate")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.TEXT_PLAIN));
    }

    @Test
    public void testInvalidPrincipal() throws Exception {
        KeytabRequest request = new KeytabRequest();
        request.setPrincipal("invalid");
        request.setPassword("pass");

        mockMvc.perform(post("/api/keytab/generate")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsString(request)))
                .andExpect(status().is5xxServerError())
                .andExpect(content().string(org.hamcrest.Matchers.containsString("Invalid principal")));
    }
}



// File: src/test/java/com/example/keytab/service/KeytabGeneratorServiceTest.java
package com.example.keytab.service;

import com.example.keytab.model.KeytabRequest;
import org.apache.commons.io.FileUtils;
import org.apache.kerby.kerberos.kerb.KrbException;
import org.junit.jupiter.api.*;
import org.springframework.boot.test.context.SpringBootTest;

import java.io.File;
import java.io.IOException;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
class KeytabGeneratorServiceTest {

    private final KeytabGeneratorService service = new KeytabGeneratorService();

    @Test
    void testGenerateBinaryKeytab() throws Exception {
        KeytabRequest request = new KeytabRequest();
        request.setPrincipal("user@EXAMPLE.COM");
        request.setPassword("secret123");
        request.setEncryptionTypes(List.of("aes256-cts-hmac-sha1-96"));
        request.setOutputPath("target/test-output/test1.keytab");

        byte[] bytes = service.generateKeytabToBytes(request);
        assertNotNull(bytes);
        assertTrue(bytes.length > 100);

        File file = new File(request.getOutputPath());
        assertTrue(file.exists());
        FileUtils.deleteQuietly(file);
    }

    @Test
    void testGenerateBase64Keytab() throws Exception {
        KeytabRequest request = new KeytabRequest();
        request.setPrincipal("user@EXAMPLE.COM");
        request.setPassword("secret123");

        String base64 = service.generateBase64Keytab(request);
        assertNotNull(base64);
        assertTrue(base64.length() > 150);
    }

    @Test
    void testInvalidPrincipal() {
        KeytabRequest request = new KeytabRequest();
        request.setPrincipal("invalid-format");
        request.setPassword("secret");

        Exception ex = assertThrows(IllegalArgumentException.class, () -> {
            service.generateBase64Keytab(request);
        });

        assertTrue(ex.getMessage().contains("Invalid principal"));
    }
}


// File: src/main/java/com/example/keytab/validation/KeytabRequestValidator.java
package com.example.keytab.validation;

import com.example.keytab.model.KeytabRequest;

import java.io.File;
import java.util.regex.Pattern;

public class KeytabRequestValidator {

    private static final Pattern PRINCIPAL_PATTERN = Pattern.compile("^[^@]+@[^@]+$");

    public static void validate(KeytabRequest request) {
        if (!PRINCIPAL_PATTERN.matcher(request.getPrincipal()).matches()) {
            throw new IllegalArgumentException("Invalid principal format. Expected format: user@REALM");
        }

        if (request.getOutputPath() != null && !request.getOutputPath().isEmpty()) {
            File file = new File(request.getOutputPath());
            File parentDir = file.getParentFile();

            if (!parentDir.exists() && !parentDir.mkdirs()) {
                throw new IllegalArgumentException("Cannot create output directory: " + parentDir);
            }

            if (parentDir.exists() && !parentDir.canWrite()) {
                throw new IllegalArgumentException("Output path not writable: " + parentDir);
            }
        }
    }
}



import com.example.keytab.validation.KeytabRequestValidator;

// Add this at the top of each method:
KeytabRequestValidator.validate(request);


POST /api/keytab/generate
{
  "principal": "user@EXAMPLE.COM",
  "password": "Secret123",
  "outputType": "binary"
}


POST /api/keytab/generate
{
  "principal": "user@EXAMPLE.COM",
  "password": "Secret123",
  "outputType": "base64"
}


// File: src/main/java/com/example/keytab/controller/KeytabGeneratorController.java
package com.example.keytab.controller;

import com.example.keytab.model.KeytabRequest;
import com.example.keytab.service.KeytabGeneratorService;
import org.apache.kerby.kerberos.kerb.KrbException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;

@RestController
@RequestMapping("/api/keytab")
public class KeytabGeneratorController {

    @Autowired
    private KeytabGeneratorService keytabGeneratorService;

    @PostMapping("/generate")
    public ResponseEntity<?> generateKeytab(@RequestBody KeytabRequest request) {
        try {
            String outputType = request.getOutputType();

            if ("binary".equalsIgnoreCase(outputType)) {
                byte[] keytabData = keytabGeneratorService.generateKeytabToBytes(request);
                return ResponseEntity.ok()
                        .contentType(MediaType.APPLICATION_OCTET_STREAM)
                        .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=generated.keytab")
                        .body(keytabData);
            } else if ("base64".equalsIgnoreCase(outputType)) {
                String base64Data = keytabGeneratorService.generateBase64Keytab(request);
                return ResponseEntity.ok()
                        .contentType(MediaType.TEXT_PLAIN)
                        .body(base64Data);
            } else {
                keytabGeneratorService.generateKeytabToBytes(request); // Generate and write to file
                return ResponseEntity.ok("Keytab generated and saved to: " + request.getOutputPath());
            }
        } catch (IOException | KrbException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error generating keytab: " + e.getMessage());
        }
    }
}


// File: src/main/java/com/example/keytab/model/KeytabRequest.java
package com.example.keytab.model;

import java.util.List;

public class KeytabRequest {
    private String principal;
    private String password;
    private String realm;
    private String outputPath;
    private List<String> encryptionTypes;
    private String outputType; // "binary" or "base64"

    // Getters & Setters
}



POST /api/keytab/generate
Content-Type: application/json

{
  "principal": "user@EXAMPLE.COM",
  "password": "StrongPassword123!",
  "realm": "EXAMPLE.COM",
  "outputPath": "/tmp/user.keytab",
  "encryptionTypes": ["aes256-cts-hmac-sha1-96", "rc4-hmac"]
}


<dependency>
    <groupId>org.apache.kerby</groupId>
    <artifactId>kerb-simplekdc</artifactId>
    <version>1.0.1</version>
</dependency>



src/main/java/com/example/keytab/
  ├── KeytabGeneratorService.java
  ├── KeytabGeneratorController.java
  ├── model/KeytabRequest.java
  └── utils/KeytabWriter.java
